{{if gt (len .Params) 1}}
type {{.Name}}In struct {
{{- range .Params}}
  {{camel .Column.Name}} {{gotype .Column}} `json:"{{.Column.Name}}"`
{{- end}}
}
{{end}}

{{ $c := index .Columns 0 }}
func {{.Name}}(tx *sqlite.Conn {{inarg .Name .Params }}) ([]{{gotype $c}}, error) {
  stmt := tx.Prep(`{{.Text}}`)
  defer stmt.Reset()

  {{ $ps := .Params }}
  {{- range .Params}}
  stmt.Bind{{dbtype .Column.Type.Name}}({{.Number}}, {{bindval $ps .Number}})
  {{- end}}

	out := []{{gotype $c}}{}
  for {
    ok, err := stmt.Step()
    if err != nil {
      return nil, err
    }
    if !ok {
      break
    }

    c := {{retval .Columns 0}}

    out = append(out, c)
  }

  return out, nil
}