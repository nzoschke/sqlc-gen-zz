{{if gt (len .Params) 1}}
type {{.Name}}In struct {
  {{- range .Params}}
    {{camel .Column.Name}} {{gotype .Column.Type.Name}} `json:"{{.Column.Name}}"`
  {{- end}}
}
{{end}}

type {{.Name}}Out []{{.Name}}Row

type {{.Name}}Row struct {
  {{- range .Columns}}
    {{camel .Name}} {{gotype .Type.Name}} `json:"{{.Name}}"`
  {{- end}}
}

func {{.Name}}(tx *sqlite.Conn {{inarg .Name .Params }}) ({{.Name}}Out, error) {
  stmt := tx.Prep(`{{.Text}}`)
  defer stmt.Reset()

  {{if eq (len .Params) 1}}
  {{ $p := index .Params 0 }}
  stmt.Bind{{dbtype $p.Column.Type.Name}}(1, {{$p.Column.Name}})
  {{else if gt (len .Params) 1}}
    {{- range .Params}}
  stmt.Bind{{dbtype .Column.Type.Name}}({{.Number}}, in.{{camel .Column.Name}})
    {{- end}}
  {{end}}

	out := {{.Name}}Out{}
  for {
    ok, err := stmt.Step()
    if err != nil {
      return nil, err
    }
    if !ok {
      break
    }

    row := {{.Name}}Row{}
    {{- range $number, $col := .Columns}}
    {{if eq (lower .Type.Name) "blob"}}
    row.{{camel .Name}} = []byte(stmt.ColumnText({{$number}}))
    {{else if eq (lower .Type.Name) "datetime"}}
    row.{{camel .Name}}, _ = time.Parse("2006-01-02 15:04:05", stmt.ColumnText({{$number}}))
    {{else}}
    row.{{camel .Name}} = stmt.Column{{dbtype .Type.Name}}({{$number}})
    {{end}}
    {{- end}}

    out = append(out, row)
  }

  return out, nil
}