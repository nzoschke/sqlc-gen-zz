{{if gt (len .Params) 1}}
type {{.Name}}In struct {
{{- range .Params}}
  {{camel .Column.Name}} {{gotype .Column}} `json:"{{.Column.Name}}"`
{{- end}}
}
{{end}}

type {{.Name}}Out []{{.Name}}Row

type {{.Name}}Row struct {
{{- range .Columns}}
  {{camel .Name}} {{gotype .}} `json:"{{.Name}}"`
{{- end}}
}

func {{.Name}}(tx *sqlite.Conn {{inarg .Name .Params }}) ({{.Name}}Out, error) {
  stmt := tx.Prep(`{{.Text}}`)
  defer stmt.Reset()

{{ $ps := .Params }}
{{- range .Params}}
  stmt.Bind{{dbtype .Column.Type.Name}}({{.Number}}, {{bindval $ps .Number}})
{{- end}}

	out := {{.Name}}Out{}
  for {
    ok, err := stmt.Step()
    if err != nil {
      return nil, err
    }
    if !ok {
      break
    }

    row := {{.Name}}Row{}

{{- $cs := .Columns }}
{{- range $number, $col := .Columns}}
  row.{{camel .Name}} = {{retval $cs $number}}
{{- end}}

    out = append(out, row)
  }

  return out, nil
}