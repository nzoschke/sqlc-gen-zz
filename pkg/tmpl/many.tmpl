{{if gt (len .Params) 1}}
type {{.Name}}In struct {
  {{- range .Params}}
    {{camel .Column.Name}} {{gotype .Column}} `json:"{{.Column.Name}}"`
  {{- end}}
}
{{end}}

type {{.Name}}Out []{{.Name}}Row

type {{.Name}}Row struct {
  {{- range .Columns}}
    {{camel .Name}} {{gotype .}} `json:"{{.Name}}"`
  {{- end}}
}

func {{.Name}}(tx *sqlite.Conn {{inarg .Name .Params }}) ({{.Name}}Out, error) {
  stmt := tx.Prep(`{{.Text}}`)
  defer stmt.Reset()

  {{ $ps := .Params }}
  {{- range .Params}}
  stmt.Bind{{dbtype .Column.Type.Name}}({{.Number}}, {{bindval $ps .Number}})
  {{- end}}

	out := {{.Name}}Out{}
  for {
    ok, err := stmt.Step()
    if err != nil {
      return nil, err
    }
    if !ok {
      break
    }

    row := {{.Name}}Row{}
    {{- range $number, $col := .Columns}}
    {{if eq (gotype .) "[]byte"}}
    row.{{camel .Name}} = []byte(stmt.ColumnText({{$number}}))
    {{else if eq (gotype .) "time.Time"}}
    row.{{camel .Name}}, _ = time.Parse("2006-01-02 15:04:05", stmt.ColumnText({{$number}}))
    {{else}}
    row.{{camel .Name}} = stmt.Column{{dbtype .Type.Name}}({{$number}})
    {{end}}
    {{- end}}

    out = append(out, row)
  }

  return out, nil
}