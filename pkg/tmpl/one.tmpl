{{if gt (len .Params) 1}}
type {{.Name}}In struct {
{{- range .Params}}
  {{camel .Column.Name}} {{gotype .Column}} `json:"{{.Column.Name}}"`
{{- end}}
}
{{end}}

type {{.Name}}Out struct {
  {{- range .Columns}}
    {{camel .Name}} {{gotype .}} `json:"{{.Name}}"`
  {{- end}}
}

func {{.Name}}(tx *sqlite.Conn {{inarg .Name .Params }}) ({{outarg .Name .Columns }} error) {
  stmt := tx.Prep(`{{.Text}}`)
  defer stmt.Reset()

{{ $ps := .Params }}
{{- range .Params}}
  stmt.Bind{{dbtype .Column.Type.Name}}({{.Number}}, {{bindval $ps .Number}})
{{- end}}

  ok, err := stmt.Step()
  if err != nil {
    return {{retempty .Name .Columns }}, err
  }
  if !ok {
    return {{retempty .Name .Columns }}, sql.ErrNoRows
  }

{{ $cs := .Columns }}
{{if eq (len .Columns) 1}}
  return {{retval $cs 0}}, nil
{{else}}
	out := {{.Name}}Out{}
  {{- range $number, $col := .Columns}}
  out.{{camel .Name}} =  {{retval $cs $number}}
{{- end}}

  return &out, nil
  {{end}}
}
