{{if gt (len .Params) 1}}
type {{.Name}}In struct {
  {{- range .Params}}
    {{camel .Column.Name}} {{gotype .Column.Type.Name}} `json:"{{.Column.Name}}"`
  {{- end}}
}
{{end}}

type {{.Name}}Out struct {
  {{- range .Columns}}
    {{camel .Name}} {{gotype .Type.Name}} `json:"{{.Name}}"`
  {{- end}}
}

func {{.Name}}(tx *sqlite.Conn {{inarg .Name .Params }}) ({{outarg .Name .Columns }} error) {
  stmt := tx.Prep(`{{.Text}}`)
  defer stmt.Reset()

  {{if eq (len .Params) 1}}
    {{ $p := index .Params 0 }}
  stmt.Bind{{dbtype $p.Column.Type.Name}}(1, {{$p.Column.Name}})
  {{else if gt (len .Params) 1}}
    {{- range .Params}}
  stmt.Bind{{dbtype .Column.Type.Name}}({{.Number}}, in.{{camel .Column.Name}})
    {{- end}}
  {{end}}

  ok, err := stmt.Step()
  if err != nil {
    return {{outempty .Name .Columns }}, err
  }
  if !ok {
    return {{outempty .Name .Columns }}, sql.ErrNoRows
  }

  {{if eq (len .Columns) 1}}
    {{$c := index .Columns 0 }}
    {{if eq (gotype $c.Type.Name) "[]byte" -}}
  return []byte(stmt.ColumnText(0)), nil
    {{else}}
  return stmt.Column{{dbtype $c.Type.Name}}(0), nil
    {{end}}
  {{else}}
	out := {{.Name}}Out{}
  {{- range $number, $col := .Columns}}
  {{if eq (gotype .Type.Name) "[]byte"}}
  out.{{camel .Name}} = []byte(stmt.ColumnText({{$number}}))
  {{else if eq (gotype .Type.Name) "time.Time"}}
  out.{{camel .Name}}, _ = time.Parse("2006-01-02 15:04:05", stmt.ColumnText({{$number}}))
  {{else}}
  out.{{camel .Name}} = stmt.Column{{dbtype .Type.Name}}({{$number}})
  {{end}}
  {{- end}}

  return &out, nil
  {{end}}
}
