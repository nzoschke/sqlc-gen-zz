// Code generated by "sqlc-gen-zz". DO NOT EDIT.

package {{.Settings.Codegen.Out}}

import (
	"database/sql"

	"zombiezen.com/go/sqlite"
)

{{range .Queries}}
type {{.Name}}In struct {
  {{- range .Params}}
    {{camel .Column.Name}} {{gotype .Column.Type.Name}} `json:"{{.Column.Name}}"`
  {{- end}}
}

{{if eq .Cmd ":exec"}}
{{if eq (len .Params) 0}}
{{template "exec0.tmpl" .}}
{{else if eq (len .Params) 1}}
{{template "exec1.tmpl" .}}
{{else}}
{{template "exec2.tmpl" .}}
{{end}}

{{else if eq .Cmd ":one"}}
{{if eq (len .Params) 0}}
{{template "one0.tmpl" .}}
{{else if eq (len .Params) 1}}
{{template "one1.tmpl" .}}
{{else}}
{{template "one2.tmpl" .}}
{{end}}

{{else if eq .Cmd ":many"}}
type {{.Name}}Out []{{.Name}}Row

type {{.Name}}Row struct {
  {{- range .Columns}}
    {{camel .Name}} {{gotype .Type.Name}} `json:"{{.Name}}"`
  {{- end}}
}

func {{.Name}}(tx *sqlite.Conn, in {{.Name}}In) ({{.Name}}Out, error) {
  stmt := tx.Prep(`{{.Text}}`)
  defer stmt.Reset()

  {{range .Params}}
	stmt.Bind{{dbtype .Column.Type.Name}}({{.Number}}, in.{{camel .Column.Name}})
  {{- end}}

	out := {{.Name}}Out{}
  for {
    ok, err := stmt.Step()
    if err != nil {
      return nil, err
    }
    if !ok {
      break
    }

    row := {{.Name}}Row{}
    {{- range $number, $col := .Columns}}
    {{- if eq (lower .Type.Name) "blob"}}
    row.{{camel .Name}} = []byte(stmt.ColumnText({{$number}}))
    {{- else}}
    row.{{camel .Name}} = stmt.Column{{dbtype .Type.Name}}({{$number}})
    {{- end}}
    {{- end}}

    out = append(out, row)
  }

  return out, nil
}

{{end}}
{{end}}