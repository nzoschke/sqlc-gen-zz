type {{.Name}}In struct {
  {{- range .Params}}
    {{camel .Column.Name}} {{gotype .Column.Type.Name}} `json:"{{.Column.Name}}"`
  {{- end}}
}

type {{.Name}}Out struct {
  {{- range .Columns}}
    {{camel .Name}} {{gotype .Type.Name}} `json:"{{.Name}}"`
  {{- end}}
}

func {{.Name}}(tx *sqlite.Conn, in {{.Name}}In) (*{{.Name}}Out, error) {
  stmt := tx.Prep(`{{.Text}}`)
  defer stmt.Reset()

  {{range .Params}}
	stmt.Bind{{dbtype .Column.Type.Name}}({{.Number}}, in.{{camel .Column.Name}})
  {{- end}}

  ok, err := stmt.Step()
  if err != nil {
    return nil, err
  }
  if !ok {
    return nil, sql.ErrNoRows
  }

	out := {{.Name}}Out{}
  {{- range $number, $col := .Columns}}
  {{- if eq (lower .Type.Name) "blob"}}
  out.{{camel .Name}} = []byte(stmt.ColumnText({{$number}}))
  {{- else if eq (lower .Type.Name) "any"}}
  out.{{camel .Name}} = []byte(stmt.ColumnText({{$number}}))
  {{- else}}
  out.{{camel .Name}} = stmt.Column{{dbtype .Type.Name}}({{$number}})
  {{- end}}
  {{- end}}

  return &out, nil
}
